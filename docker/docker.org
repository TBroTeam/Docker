* Installation for TBro using Docker containers

** General structure
   The Docker installation is separated into two independent containers:
   1) Database container
      - postgresql
      - CHADO database scheme plus modifications
      - AdminTools
   2) TBro Website
      - Apache2
      - php settings...
   3) memcached container
      Maybe better included into TBro website container
   4) Worker container

** Preparation
   #+BEGIN_SRC sh
     mkdir db_container
     mkdir apache_container
     mkdir memcached_container
     mkdir worker_container
   #+END_SRC

   According to the thesis of Lenz, it is required to install Chado
   1.2 separately. Therefore I need to download the Chado file first.
   #+BEGIN_SRC sh :dir db_container/
     wget -O chado-1.2.tar.gz 'http://downloads.sourceforge.net/project/gmod/gmod/chado-1.2/chado-1.2.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fgmod%2Ffiles%2Fgmod%2Fchado-1.2%2F&ts=1415403627&use_mirror=kent'
   #+END_SRC

   Following the installation instructions from Lenz thesis, the next
   step is the reduction of the database scheme:
   #+BEGIN_SRC sh :dir db_container/
     # untar the chado archive
     tar xzf chado-1.2.tar.gz

     # change to newly created folder
     cd chado-1.2

     # follow the instructions of Lenz:
     cd modules
     perl bin/makedep.pl --modules general,cv,pub,organism,sequence,contact,companalysis,mage > default_schema.sql
     cd ../..

     # create a new archive used for later transfer to image
     tar czf chado-1.2.mod.tar.gz chado-1.2
   #+END_SRC

   Additionally, I have to download the obo file for GO terms and convert it into XML
   #+BEGIN_SRC sh :dir db_container/
     wget -O gene_ontology.1_2.obo 'http://www.geneontology.org/ontology/obo_format_1_2/gene_ontology.1_2.obo'

     # convertion into xml format this might need the installation of
     # additional packages and should be moved into the chade database
     # generation later
     go2fmt.pl -p obo_text -w xml gene_ontology.1_2.obo | go-apply-xslt oboxml_to_chadoxml - > g_o.1_2.chadoxml

     # generation of an tar archive for transfer into the container
     tar czf g_o.1_2.chadoxml.tar.gz  g_o.1_2.chadoxml
   #+END_SRC

** Database container
   We start from the default postgres container
   #+BEGIN_SRC sh :tangle db_container/Dockerfile
     FROM postgres:9.3
   #+END_SRC

   First we update our machine and install the required php packages
   #+BEGIN_SRC sh :tangle db_container/Dockerfile
     RUN apt-get update
     RUN apt-get --assume-yes install \
         php5-cli \
         php-pear \
         php5-pgsql \
         php5-curl \
         php5-dev \
         build-essential
   #+END_SRC

   Next we need to install phing
   #+BEGIN_SRC sh :tangle db_container/Dockerfile
     RUN pear channel-discover pear.phing.info
     RUN pear install --alldeps phing/phing
   #+END_SRC

   Modify php.ini to diable phar.readonly
   #+BEGIN_SRC sh :tangle db_container/Dockerfile
     RUN sed -i '/phar.readonly = /s/^.*/phar.readonly = Off/' /etc/php5/cli/php.ini
   #+END_SRC

   Copy the chado-file into the database-container and extract it
   #+BEGIN_SRC sh :tangle db_container/Dockerfile
     ADD ./chado-1.2.mod.tar.gz /tmp/
   #+END_SRC

   Add the ontology-file
   #+BEGIN_SRC sh :tangle db_container/Dockerfile
     ADD g_o.1_2.chadoxml.tar.gz /tmp/
   #+END_SRC

   The Chado installation instruction give the following modules as required for the installation:
   | module name              | description                | via package manager            |
   |--------------------------+----------------------------+--------------------------------|
   | URI::Escape              |                            |                                |
   | Pod::Usage               |                            |                                |
   | Config::General          |                            |                                |
   | DBI                      | gbrowse, chado             | libdbi-perl                    |
   | DBD::Pg                  | gbrowse, chado             | libdbd-pg-perl                 |
   | Digest::MD5              |                            |                                |
   | Module::Build            | chado (installation only)  | libmodule-build-perl           |
   | Class::DBI               | chado                      | libclass-dbi-perl              |
   | Class::DBI::Pg           | chado                      | libclass-dbi-pg-perl           |
   | Class::DBI::Pager        | chado                      | libclass-dbi-pager-perl        |
   | Class::DBI::View         | chado                      |                                |
   | XML::Simple              | chado (installation only?) | libxml-simple-perl             |
   | LWP                      | chado (installation only)  |                                |
   | Template                 | chado                      | libtemplate-perl               |
   | Log::Log4perl            | chado                      | liblog-log4perl-perl           |
   | XML::Parser::PerlSAX     | XORT, Apollo               |                                |
   | XML::DOM                 | XORT, Apollo               | libxml-dom-perl                |
   | File::Path               |                            |                                |
   | Text::Tabs               |                            |                                |
   | File::Spec               |                            |                                |
   | XML::Writer              | SOI                        | libxml-writer-perl             |
   | Graph                    | Chaos                      | libgraph-perl                  |
   | DBIx::DBStag             | chado, ontology loader     | libdbix-dbstag-perl            |
   | GO::Parser               | chado, ontology loader     |                                |
   | XML::LibXSLT             | chaos                      | libxml-libxslt-perl            |
   | Ima::DBI                 | SGN ontology loader        | libima-dbi-perl                |
   | Class::MethodMaker       | SGN ontology loader        | libclass-methodmaker-perl      |
   | URI                      | SGN ontology loader        | liburi-perl                    |
   | LWP::Simple              | SGN ontology loader        |                                |
   | XML::Twig                | SGN ontology loader        | libxml-twig-perl               |
   | Tie::UrlEncoder          | SGN ontology loader        |                                |
   | HTML::TreeBuilder        | SGN ontology loader        |                                |
   | Time::HiRes              | SGN ontology loader        |                                |
   | File::NFSLock            | SGN ontology loader        | libfile-nfslock-perl           |
   | Class::Data::Inheritable | SGN ontology loader        | libclass-data-inheritable-perl |
   | IO::Dir                  | chado install util         |                                |
   | Text::Wrap               | snp2gff?                   |                                |

   Install required perl modules
   #+BEGIN_SRC sh :tangle db_container/Dockerfile
     RUN apt-get install --assume-yes \
         libdbi-perl \
         libdbd-pg-perl \
         libmodule-build-perl \
         libclass-dbi-perl \
         libclass-dbi-pg-perl \
         libclass-dbi-pager-perl \
         libxml-simple-perl \
         libtemplate-perl \
         liblog-log4perl-perl \
         libxml-dom-perl \
         libxml-writer-perl \
         libgraph-perl \
         libdbix-dbstag-perl \
         libxml-libxslt-perl \
         libima-dbi-perl \
         libclass-methodmaker-perl \
         liburi-perl \
         libxml-twig-perl \
         libfile-nfslock-perl \
         libclass-data-inheritable-perl \
         xsltproc \
         postgresql-server-dev-all
     RUN PERL_MM_USE_DEFAULT=1 cpan -i \
         SQL::Translator \
         URI::Escape \
         Pod::Usage \
         Config::General \
         Digest::MD5 \
         Class::DBI::View \
         LWP \
         XML::Parser::PerlSAX \
         File::Path \
         Text::Tabs \
         File::Spec \
         GO::Parser \
         LWP::Simple \
         Tie::UrlEncoder \
         HTML::TreeBuilder \
         Time::HiRes \
         IO::Dir \
         Text::Wrap \
         DBD::Pg
   #+END_SRC

   #+BEGIN_SRC sh :tangle ./db_container/fix-acl.sh :shebang "#!/bin/bash"
     echo "******MODIFYING PG_HBA.CONF******"
     cat > /var/lib/postgresql/data/pg_hba.conf <<EOS
     # Generated by fix-acl.sh
     # TYPE  DATABASE        USER            ADDRESS                 METHOD
     # "local" is for Unix domain socket connections only
     local   all             all                                     trust
     # IPv4 local connections:
     host    all             all             127.0.0.1/32            trust
     # IPv6 local connections:
     host    all             all             ::1/128                 trust

     # Allow anyone to connect remotely so long as they have a valid username and
     # password.
     host all all 0.0.0.0/0 md5
     EOS
     echo ""
     echo "******MODIFYING PG_HBA.CONF FINISHED******"
   #+END_SRC

   #+BEGIN_SRC sh :tangle ./db_container/create_user_db.sh :shebang "#!/bin/bash"
     # Check if the environment variables CHADO_* exist otherwise take default values
     CHADO_DB=${CHADO_DATABASE:-chado}
     CHADO_PW=${CHADO_PASSWORD:-tbro}
     CHADO_USER=${CHADO_USERNAME:-tbro}
     echo "******CREATING DOCKER DATABASE******"
     gosu postgres postgres --single <<- EOSQL
        CREATE DATABASE $CHADO_DB;
        CREATE ROLE $CHADO_USER ENCRYPTED PASSWORD '$DRUPAL_PW' NOSUPERUSER CREATEDB NOCREATEROLE INHERIT LOGIN;
        GRANT ALL PRIVILEGES ON DATABASE $CHADO_DB to $CHADO_USER;
     EOSQL
     echo ""
     echo "******DOCKER DATABASE CREATED******"
   #+END_SRC
