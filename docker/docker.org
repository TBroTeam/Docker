#+TODO: TODO(t!) INPG(i@/!) TEST(n@/!) TESTFAIL(f@/!) TESTPASS(p@/!) | DONE(d!) REJC(c@)

* Installation for TBro using Docker containers

** General structure
   The Docker installation is separated into two independent containers:
   1) Database container
      - postgresql
      - CHADO database scheme plus modifications
      - AdminTools
   2) TBro Website
      - Apache2
      - php settings...
   3) memcached container
      Maybe better included into TBro website container
   4) Worker container

** Preparation
   #+BEGIN_SRC sh :results output silent
     mkdir apache_container
     mkdir memcached_container
     mkdir worker_container
     mkdir chado_create_container
     mkdir generic_db_container
   #+END_SRC

** Generic database image
   We start from the default postgres container
   #+BEGIN_SRC sh :tangle generic_db_container/Dockerfile
     FROM postgres:9.3
   #+END_SRC

   #+BEGIN_SRC sh :tangle ./generic_db_container/fix-acl.sh :shebang "#!/bin/bash"
     echo "******MODIFYING PG_HBA.CONF******"
     cat > /var/lib/postgresql/data/pg_hba.conf <<EOS
     # Generated by fix-acl.sh
     # TYPE  DATABASE        USER            ADDRESS                 METHOD
     # "local" is for Unix domain socket connections only
     local   all             all                                     trust
     # IPv4 local connections:
     host    all             all             127.0.0.1/32            trust
     # IPv6 local connections:
     host    all             all             ::1/128                 trust

     # Allow anyone to connect remotely so long as they have a valid username and
     # password.
     host all all 0.0.0.0/0 md5
     EOS
     echo ""
     echo "******MODIFYING PG_HBA.CONF FINISHED******"
   #+END_SRC

   #+BEGIN_SRC sh :tangle ./generic_db_container/create_user_db.sh :shebang "#!/bin/bash"
     # Check if the environment variables DB_* exist otherwise take default values
     DB_NAME=${DB_NAME:-mydatabase}
     DB_PW=${DB_PW:-mypassword}
     DB_USER=${DB_USER:-myuser}
     echo "******CREATING DOCKER DATABASE******"
     gosu postgres postgres --single <<- EOSQL
        CREATE DATABASE $DB_NAME;
        CREATE ROLE $DB_USER ENCRYPTED PASSWORD '$DB_PW' NOSUPERUSER CREATEDB NOCREATEROLE INHERIT LOGIN;
        ALTER DATABASE $DB_NAME OWNER TO $DB_USER;
        GRANT ALL PRIVILEGES ON DATABASE $DB_NAME to $DB_USER;
     EOSQL
     echo ""
     echo "******DOCKER DATABASE CREATED******"
   #+END_SRC

   Finally I have to add a user to the database
   #+BEGIN_SRC sh :tangle generic_db_container/Dockerfile
     ADD fix-acl.sh /docker-entrypoint-initdb.d/
     ADD create_user_db.sh /docker-entrypoint-initdb.d/
   #+END_SRC

   Create the generic_db_image
   #+BEGIN_SRC sh :results output silent
     docker build --tag "greatfireball/generic_postgres_db" .
     docker run -d -e DB_NAME=chado -e DB_USER=tbro -e DB_PW=tbro --name "Chado_DB_4_TBro" greatfireball/generic_postgres_db
     docker run -d -e DB_NAME=worker -e DB_USER=worker -e DB_PW=worker --name "Worker_DB_4_TBro" greatfireball/generic_postgres_db
   #+END_SRC
** Apache container
   We start from the default postgres container
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     FROM ubuntu
   #+END_SRC

   First we update our machine and install the required php packages
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     RUN apt-get update
     RUN apt-get --assume-yes install \
         apache2 \
         php5 \
         php-pear \
         php5-pgsql \
         php5-curl \
         php5-dev \
         build-essential \
         memcached
   #+END_SRC

   Next we need to install phing
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     RUN pear channel-discover pear.phing.info
     RUN pear install --alldeps phing/phing
     RUN pear channel-discover pear.propelorm.org
     RUN pear install -a propel/propel_runtime
     RUN pear install Log
     RUN pear install Console_CommandLine
     #RUN pear install Console_Table
     RUN pear install channel://pear.php.net/Console_ProgressBar-0.5.2beta
   #+END_SRC

   Modify php.ini to diable phar.readonly
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     RUN sed -i '/phar.readonly = /s/^.*/phar.readonly = Off/' /etc/php5/cli/php.ini
   #+END_SRC

   We have to enable mod_rewrite
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     RUN a2enmod rewrite
   #+END_SRC

   Generate a TBro image from the commit  82c52be7f
   #+BEGIN_SRC sh :dir ../
     git archive --format tar.gz --output docker/apache_container/a4fc8edff_Tbro.tar.gz a4fc8edff
   #+END_SRC

   And copy the TBro archive to the image
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     ADD a4fc8edff_Tbro.tar.gz /home/tbro/
   #+END_SRC

   Generate a build.properties based on the environmental variables
   given to the container. Therefore we need a script:
   #+BEGIN_SRC sh :tangle apache_container/build_installation.sh :shebang "#!/bin/bash"
     echo "
     prefix = $PREFIX
     config_dir = \${prefix}/etc/tbro
     bin_dir = \${prefix}/bin
     www_root = \${prefix}/var/www/html
     share_path = \${prefix}/share/tbro
     var_path = \${prefix}/var/tbro
     autocomplete_path = /etc/bash_completion.d
     www_user = www-data
     www_group = www-data
     www_mode = 0777

     chado_db_host = $CHADO_PORT_5432_TCP_ADDR
     chado_db_name = $CHADO_ENV_DB_NAME
     chado_db_port = $CHADO_PORT_5432_TCP_PORT
     chado_db_username = $CHADO_ENV_DB_USER
     chado_db_password = $CHADO_ENV_DB_PW

     queue_db_host = $WORKER_PORT_5432_TCP_ADDR
     queue_db_name = $WORKER_ENV_DB_NAME
     queue_db_port = $WORKER_PORT_5432_TCP_PORT
     queue_db_username = $WORKER_ENV_DB_USER
     queue_db_password = $WORKER_ENV_DB_PW

     srcdir = \${project.basedir}/src
     builddir = /tmp/build/tbro" > /home/tbro/build.properties

     cd /home/tbro

     phing database-initialize
     phing database-commit-modifications

     phing cli-install
     phing web-install

     # get the config dir from build.properties
     eval $(grep "prefix =" build.properties | tr -d " ")
     eval $(grep "config_dir =" build.properties | tr -d " ")

     # rename config.php.generated cvterms.php.generated
     mv $config_dir/config.php.generated $config_dir/config.php
     mv $config_dir/cvterms.php.generated $config_dir/cvterms.php
   #+END_SRC

   If the container is started, I need to change the connection
   parameter to the database containers for chado-db and worker-db:
   #+BEGIN_SRC sh :tangle apache_container/update_installation.sh :shebang "#!/bin/bash"
     if [ ! -e /tmp/tbro ]
     then
         echo "No /home/tbro directory found... Exiting!"
         exit
     fi

     cd /tmp/tbro

     # check if the build.properties are existing, otherwise we are done
     if [ ! -e build.properties ]
     then
         echo "No build.properties found... Exiting!"
         exit
     fi

     # load the build.properties
     eval $(grep "prefix =" build.properties | tr -d " ")
     eval $(grep "config_dir =" build.properties | tr -d " ")

     # check if the file $config_dir/config.php exists, otherwise exit
     if [ ! -e $config_dir/config.php ]
     then
         echo "No $config_dir/config.php found... Exiting!"
         exit
     fi

     # finally use the values from environmental variables to update
     # database connection parameters
     echo "s/\(^define('DB_CONNSTR', 'pgsql:host=\).*\(;dbname=\).*\(;port=\).*\(');\).*/\1"$CHADO_PORT_5432_TCP_ADDR"\2"$CHADO_ENV_DB_NAME"\3"$CHADO_PORT_5432_TCP_PORT"\4/;
     s/\(^define('DB_USERNAME', '\).*\(');\)/\1"$CHADO_ENV_USER"\2/;
     s/\(^define('DB_PASSWORD', '\).*\(');\)/\1"$CHADO_ENV_PW"\2/;
     s/\(^define('QUEUE_DB_CONNSTR', 'pgsql:host=\).*\(;dbname=\).*\(;port=\).*\(');\).*/\1"$WORKER_PORT_5432_TCP_ADDR"\2"$WORKER_ENV_DB_NAME"\3"$WORKER_PORT_5432_TCP_PORT"\4/;
     s/\(^define('QUEUE_DB_USERNAME', '\).*\(');\)/\1"$WORKER_ENV_USER"\2/;
     s/\(^define('QUEUE_DB_PASSWORD', '\).*\(');\)/\1"$WORKER_ENV_PW"\2/;" > update_config.sed

     sed -if update_config.sed $config_dir/config.php
   #+END_SRC

   And add this script to our image
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     ADD build_installation.sh /home/tbro/
     ADD update_installation.sh /home/tbro/
   #+END_SRC

   Finally we start the apache instance
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     CMD /home/tbro/update_installation.sh; service apache2 start; while true; do sleep 60; done
   #+END_SRC

   Creation of the image:
   #+BEGIN_SRC sh :results output silent
     docker build --tag tbro_apache .
     docker run -d --link Chado_DB_4_TBro:CHADO --link Worker_DB_4_TBro:WORKER --name "TBro" -p 8090:80 tbro_apache

     ## build the build.properties
     docker exec -i -t TBro /home/tbro/build_installation.sh
   #+END_SRC

** Installation of Chado database
   #+BEGIN_SRC sh :tangle chado_create_container/generate_db.sh :shebang "#!/bin/bash"
     export CHADO_DB_NAME=${CHADO_ENV_DB_NAME:-chado}
     export CHADO_DB_USERNAME=${CHADO_ENV_DB_USER:-tbro}
     export CHADO_DB_PASSWORD=${CHADO_ENV_DB_PW:-tbro}
     export CHADO_DB_HOST=${CHADO_PORT_5432_TCP_ADDR:-localhost}
     export CHADO_DB_PORT=${CHADO_PORT_5432_TCP_PORT:-5432}

     # download chado package
     date +"[%Y-%m-%d %H:%M:%S] Starting download of chado package..."
     wget -O /tmp/chado-1.2.tar.gz 'http://downloads.sourceforge.net/project/gmod/gmod/chado-1.2/chado-1.2.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fgmod%2Ffiles%2Fgmod%2Fchado-1.2%2F&ts=1415403627&use_mirror=kent'
     date +"[%Y-%m-%d %H:%M:%S] Finished download of chado package!"

     # Follow the instructions of Lenz to generate an adapted version of chado
     # untar the chado archive
     date +"[%Y-%m-%d %H:%M:%S] Starting preparation of chado package..."
     cd /tmp/
     tar xzf chado-1.2.tar.gz

     # change to newly created folder
     cd chado-1.2

     # follow the instructions of Lenz:
     cd modules
     perl bin/makedep.pl --modules general,cv,pub,organism,sequence,contact,companalysis,mage > default_schema.sql
     date +"[%Y-%m-%d %H:%M:%S] Finished preparation of chado package!"

     date +"[%Y-%m-%d %H:%M:%S] Started preparation of GO 1.2..."
     cd /tmp
     wget -O gene_ontology.1_2.obo 'http://www.geneontology.org/ontology/obo_format_1_2/gene_ontology.1_2.obo'

     # convertion into xml format this might need the installation of
     # additional packages and should be moved into the chade database
     # generation later
     go2fmt -p obo_text -w xml gene_ontology.1_2.obo | go-apply-xslt oboxml_to_chadoxml - > g_o.1_2.chadoxml
     date +"[%Y-%m-%d %H:%M:%S] Finished preparation of GO 1.2!"


     mkdir -p /usr/local/gmod
     export GMOD_ROOT=/usr/local/gmod

     cd /tmp/chado-1.2/

     # remove old build.conf if existing
     if [ -e build.conf ]
     then
         rm build.conf
     fi

     # run the Makefile.PL generator
     echo "" | perl Makefile.PL

     # the installation name for stag-storenode does not end by an .pl
     # to circumstand the wrong name I am generating links with the expected names
     ln -s $(which stag-storenode) $(dirname $(which stag-storenode))/stag-storenode.pl
     ln -s $(which go2fmt) $(dirname $(which go2fmt))/go2fmt.pl


     # run the make commands
     make
     make install
     make load_schema
     make prepdb
     make ontologies <<EOF
     1,2
     EOF

     # install the prepared GO 1.2
     date +"[%Y-%m-%d %H:%M:%S] Starting import of own GO 1.2"
     stag-storenode.pl \
         -d 'dbi:Pg:dbname='$CHADO_DB_NAME';host='$CHADO_DB_HOST';port='$CHADO_DB_PORT \
         --user "$CHADO_DB_USERNAME" \
         --password "$CHADO_DB_PASSWORD" \
         ../g_o.1_2.chadoxml
     date +"[%Y-%m-%d %H:%M:%S] Finished import of own GO 1.2"

     # importing the function ontology as last ontology
     make ontologies <<EOF
     4
     EOF

     # make the optional targets
     make rm_locks
     make clean
   #+END_SRC

   We start from the default ubuntu container
   #+BEGIN_SRC sh :tangle chado_create_container/Dockerfile
     FROM ubuntu
   #+END_SRC

   #+BEGIN_SRC sh :tangle chado_create_container/Dockerfile
     RUN apt-get update
     RUN apt-get --assume-yes install \
         php5-cli \
         php-pear \
         php5-pgsql \
         php5-curl \
         php5-dev \
         build-essential
   #+END_SRC

   Next we need to install phing
   #+BEGIN_SRC sh :tangle chado_create_container/Dockerfile
     RUN pear channel-discover pear.phing.info
     RUN pear install --alldeps phing/phing
     RUN pear channel-discover pear.propelorm.org
     RUN pear install -a propel/propel_runtime
     RUN pear install Log
     RUN pear install Console_CommandLine
     #RUN pear install Console_Table
     RUN pear install channel://pear.php.net/Console_ProgressBar-0.5.2beta
   #+END_SRC

   Modify php.ini to diable phar.readonly
   #+BEGIN_SRC sh :tangle chado_create_container/Dockerfile
     RUN sed -i '/phar.readonly = /s/^.*/phar.readonly = Off/' /etc/php5/cli/php.ini
   #+END_SRC

   The Chado installation instruction give the following modules as required for the installation:
   | module name              | description                | via package manager            |
   |--------------------------+----------------------------+--------------------------------|
   | URI::Escape              |                            |                                |
   | Pod::Usage               |                            |                                |
   | Config::General          |                            |                                |
   | DBI                      | gbrowse, chado             | libdbi-perl                    |
   | DBD::Pg                  | gbrowse, chado             | libdbd-pg-perl                 |
   | Digest::MD5              |                            |                                |
   | Module::Build            | chado (installation only)  | libmodule-build-perl           |
   | Class::DBI               | chado                      | libclass-dbi-perl              |
   | Class::DBI::Pg           | chado                      | libclass-dbi-pg-perl           |
   | Class::DBI::Pager        | chado                      | libclass-dbi-pager-perl        |
   | Class::DBI::View         | chado                      |                                |
   | XML::Simple              | chado (installation only?) | libxml-simple-perl             |
   | LWP                      | chado (installation only)  |                                |
   | Template                 | chado                      | libtemplate-perl               |
   | Log::Log4perl            | chado                      | liblog-log4perl-perl           |
   | XML::Parser::PerlSAX     | XORT, Apollo               |                                |
   | XML::DOM                 | XORT, Apollo               | libxml-dom-perl                |
   | File::Path               |                            |                                |
   | Text::Tabs               |                            |                                |
   | File::Spec               |                            |                                |
   | XML::Writer              | SOI                        | libxml-writer-perl             |
   | Graph                    | Chaos                      | libgraph-perl                  |
   | DBIx::DBStag             | chado, ontology loader     | libdbix-dbstag-perl            |
   | GO::Parser               | chado, ontology loader     |                                |
   | XML::LibXSLT             | chaos                      | libxml-libxslt-perl            |
   | Ima::DBI                 | SGN ontology loader        | libima-dbi-perl                |
   | Class::MethodMaker       | SGN ontology loader        | libclass-methodmaker-perl      |
   | URI                      | SGN ontology loader        | liburi-perl                    |
   | LWP::Simple              | SGN ontology loader        |                                |
   | XML::Twig                | SGN ontology loader        | libxml-twig-perl               |
   | Tie::UrlEncoder          | SGN ontology loader        |                                |
   | HTML::TreeBuilder        | SGN ontology loader        |                                |
   | Time::HiRes              | SGN ontology loader        |                                |
   | File::NFSLock            | SGN ontology loader        | libfile-nfslock-perl           |
   | Class::Data::Inheritable | SGN ontology loader        | libclass-data-inheritable-perl |
   | IO::Dir                  | chado install util         |                                |
   | Text::Wrap               | snp2gff?                   |                                |

   Install required perl modules
   #+BEGIN_SRC sh :tangle chado_create_container/Dockerfile
     RUN apt-get install --assume-yes \
         libdbi-perl \
         libdbd-pg-perl \
         libmodule-build-perl \
         libclass-dbi-perl \
         libclass-dbi-pg-perl \
         libclass-dbi-pager-perl \
         libxml-simple-perl \
         libtemplate-perl \
         liblog-log4perl-perl \
         libxml-dom-perl \
         libxml-writer-perl \
         libgraph-perl \
         libdbix-dbstag-perl \
         libxml-libxslt-perl \
         libima-dbi-perl \
         libclass-methodmaker-perl \
         liburi-perl \
         libxml-twig-perl \
         libfile-nfslock-perl \
         libclass-data-inheritable-perl \
         xsltproc \
         postgresql-server-dev-all \
         postgresql-client-9.3 \
         libgo-perl \
         wget
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install SQL::Translator'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install URI::Escape'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Pod::Usage'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Config::General'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Digest::MD5'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Class::DBI::View'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install LWP'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install XML::Parser::PerlSAX'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install File::Path'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Text::Tabs'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install File::Spec'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install GO::Parser'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install LWP::Simple'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Tie::UrlEncoder'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install HTML::TreeBuilder'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Time::HiRes'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install IO::Dir'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Text::Wrap'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install DBD::Pg'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install GO::Utils'
   #+END_SRC

   Additionally, I want to have the script for database-Installation in my image
   #+BEGIN_SRC sh :tangle chado_create_container/Dockerfile
     ADD generate_db.sh /tmp/
   #+END_SRC

   As CMD we would like to run the generate.sh script. First, we set
   the HOME env var, followed by the creation of a .pgpass file in our
   home directory. Finally we have to call generate.sh... That's all :)
   #+BEGIN_SRC sh :tangle chado_create_container/Dockerfile
     CMD export HOME=/tmp/; \
         echo "$CHADO_PORT_5432_TCP_ADDR:$CHADO_PORT_5432_TCP_PORT:$CHADO_ENV_DB_NAME:$CHADO_ENV_DB_USER:$CHADO_ENV_DB_PW" > $HOME/.pgpass; \
         chmod 600 $HOME/.pgpass; \
         export PGPASSWORD="$CHADO_ENV_DB_PW"; \
         $HOME/generate_db.sh
   #+END_SRC

   Create and run the container

   #+BEGIN_SRC sh :results output silent
     docker build --tag tbro_chado_generate .
     docker run -i -t --rm --link Chado_DB_4_TBro:CHADO --name "TBro_CHADO" tbro_chado_generate
   #+END_SRC

** Issues
  #+BEGIN_QUOTE
  15. Nov. 00:55 - Markus Ankenbrand: Ok ich hab das Funktionen Problem gelöst. War tatsächlich mein Fehler. Hab auch im Docker branch den commit angepasst. Hab beide gepushed. Jetzt klappt auch der import von Sequenz IDs in die DB. Wir haben aber immer noch Probleme:
                   1. own go bricht mit duplicate value ab.
                   2. Man muss build_installation.sh zweimal ausführen. Beim ersten mal fehlt manchen noch die config.php (z.B. den bash_completions)
                   3. Wir haben den propel Version mismatch
                   4. tbro-db organism list geht nicht.
                   5. Der TBro findet die Ajax Webservices nicht - mod_rewrite ist aber an, oder?
                   6. Und das sind nur die Probleme, die ich schon kenne
                   Gute Nacht
  15. Nov. 00:59 - Frank Förster: Du sollst schlafen!
  15. Nov. 00:59 - Frank Förster: :)
  15. Nov. 00:59 - Frank Förster: Danke für die Analyse
  15. Nov. 01:00 - Frank Förster: Just one thing...
  15. Nov. 01:01 - Frank Förster: Wir!sollten die ontologies in der richtigen reihenfolge machen
  15. Nov. 01:01 - Frank Förster: Wir machen 1, 2 und 4 und anschließend 3
  15. Nov. 01:01 - Frank Förster: Vielleicht ist es das schon
  15. Nov. 01:02 - Markus Ankenbrand: Gerne 😃 schau ich mir morgen an. Jetzt geh ich erstmal schlafen
  15. Nov. 01:09 - Frank Förster: Das mit dem zweimal build_Installation ist auch schon mist. Darf das drin, dass beim ersten mal etwas fehlt?
  15. Nov. 01:09 - Frank Förster: Ich bin gerade wieder wach geworden
  15. Nov. 01:09 - Frank Förster: Ich schaue mir den Code nochmal an
  15. Nov. 01:10 - Frank Förster: Also vergiss nicht neu pullen :)
  15. Nov. 01:11 - Frank Förster: Mod_rewrite sollte an sein
  15. Nov. 01:12 - Frank Förster: 4. Punkt macht da Sinn?
  15. Nov. 01:12 - Frank Förster: das nicht da
  15. Nov. 01:13 - Frank Förster: Was nehmen wir zum issue tracken? Gleich unsere org file?
  15. Nov. 01:13 - Frank Förster: Oder redmine?
  15. Nov. 01:13 - Frank Förster: Email?
  #+END_QUOTE

*** TEST Update of database connection during start of apache container
    - State "TEST"       from "INPG"       [2014-11-15 Sa 02:24] \\
      Implementation finished... Test is required
    - State "INPG"       from "TODO"       [2014-11-14 Fr 17:00] \\
      Frank started working on the issue
    - State "TODO"       from ""           [2014-11-14 Fr 16:30]
*** TODO During TBro installation a more generic appoach for the used commit to checkout
    - State "TODO"       from ""       [2014-11-15 Sa 01:15]
*** TEST own go bricht mit duplicate value ab.
    - State "TEST"       from "INPG"       [2014-11-15 Sa 02:11] \\
      Possible solution have been prepared and need to be tested now
    - State "INPG"       from "TODO"       [2014-11-15 Sa 01:20] \\
      Frank started to work on the issue
    - State "TODO"       from ""       [2014-11-15 Sa 01:15]

      My idea is that this issue might be basing on the order we are
      executing the ontology import. Normally the import order is given
      by the make ontologies run. We changed that order due to we first
      import functions during generate_db.sh script followed by the
      import of our own GO ontology.

      I changed the order of the ontology import.
*** TODO Man muss build_installation.sh zweimal ausführen. Beim ersten mal fehlt manchen noch die config.php (z.B. den bash_completions)
    - State "TODO"       from ""       [2014-11-15 Sa 01:15]
*** TODO Wir haben den propel Version mismatch
    - State "TODO"       from ""       [2014-11-15 Sa 01:15]
*** TODO tbro-db organism list geht nicht.
    - State "TODO"       from ""       [2014-11-15 Sa 01:15]
*** TODO Der TBro findet die Ajax Webservices nicht - mod_rewrite ist aber an, oder?
    - State "TODO"       from ""       [2014-11-15 Sa 01:15]
