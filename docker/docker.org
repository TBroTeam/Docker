* Installation for TBro using Docker containers

** General structure
   The Docker installation is separated into two independent containers:
   1) Database container
      - postgresql
      - CHADO database scheme plus modifications
      - AdminTools
   2) TBro Website
      - Apache2
      - php settings...
   3) memcached container
      Maybe better included into TBro website container
   4) Worker container

** Preparation
   #+BEGIN_SRC sh
     mkdir db_container
     mkdir apache_container
     mkdir memcached_container
     mkdir worker_container
     mkdir worker_db_container
     mkdir chado_create_container
   #+END_SRC

   According to the thesis of Lenz, it is required to install Chado
   1.2 separately. Therefore I need to download the Chado file first.
   #+BEGIN_SRC sh :dir apache_container/
     wget -O chado-1.2.tar.gz 'http://downloads.sourceforge.net/project/gmod/gmod/chado-1.2/chado-1.2.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fgmod%2Ffiles%2Fgmod%2Fchado-1.2%2F&ts=1415403627&use_mirror=kent'
   #+END_SRC

   Following the installation instructions from Lenz thesis, the next
   step is the reduction of the database scheme:
   #+BEGIN_SRC sh :dir apache_container/
     # untar the chado archive
     tar xzf chado-1.2.tar.gz

     # change to newly created folder
     cd chado-1.2

     # follow the instructions of Lenz:
     cd modules
     perl bin/makedep.pl --modules general,cv,pub,organism,sequence,contact,companalysis,mage > default_schema.sql
     cd ../..

     # create a new archive used for later transfer to image
     tar czf chado-1.2.mod.tar.gz chado-1.2
   #+END_SRC

   Additionally, I have to download the obo file for GO terms and convert it into XML
   #+BEGIN_SRC sh :dir apache_container/
     wget -O gene_ontology.1_2.obo 'http://www.geneontology.org/ontology/obo_format_1_2/gene_ontology.1_2.obo'

     # convertion into xml format this might need the installation of
     # additional packages and should be moved into the chade database
     # generation later
     go2fmt.pl -p obo_text -w xml gene_ontology.1_2.obo | go-apply-xslt oboxml_to_chadoxml - > g_o.1_2.chadoxml

     # generation of an tar archive for transfer into the container
     tar czf g_o.1_2.chadoxml.tar.gz  g_o.1_2.chadoxml
   #+END_SRC

** Database container
   We start from the default postgres container
   #+BEGIN_SRC sh :tangle db_container/Dockerfile
     FROM postgres:9.3
   #+END_SRC

   First we update our machine and install the required php packages
   #+BEGIN_SRC sh :tangle db_container/Dockerfile
     RUN apt-get update
   #+END_SRC

   #+BEGIN_SRC sh :tangle ./db_container/fix-acl.sh :shebang "#!/bin/bash"
     echo "******MODIFYING PG_HBA.CONF******"
     cat > /var/lib/postgresql/data/pg_hba.conf <<EOS
     # Generated by fix-acl.sh
     # TYPE  DATABASE        USER            ADDRESS                 METHOD
     # "local" is for Unix domain socket connections only
     local   all             all                                     trust
     # IPv4 local connections:
     host    all             all             127.0.0.1/32            trust
     # IPv6 local connections:
     host    all             all             ::1/128                 trust

     # Allow anyone to connect remotely so long as they have a valid username and
     # password.
     host all all 0.0.0.0/0 md5
     EOS
     echo ""
     echo "******MODIFYING PG_HBA.CONF FINISHED******"
   #+END_SRC

   #+BEGIN_SRC sh :tangle ./db_container/create_user_db.sh :shebang "#!/bin/bash"
     # Check if the environment variables CHADO_* exist otherwise take default values
     CHADO_DB=${CHADO_DB:-chado}
     CHADO_PW=${CHADO_PASSWORD:-tbro}
     CHADO_USER=${CHADO_USER:-tbro}
     echo "******CREATING DOCKER DATABASE******"
     gosu postgres postgres --single <<- EOSQL
        CREATE DATABASE $CHADO_DB;
        CREATE ROLE $CHADO_USER ENCRYPTED PASSWORD '$CHADO_PW' NOSUPERUSER CREATEDB NOCREATEROLE INHERIT LOGIN;
        ALTER DATABASE $CHADO_DB OWNER TO $CHADO_USER;
        GRANT ALL PRIVILEGES ON DATABASE $CHADO_DB to $CHADO_USER;
     EOSQL
     echo ""
     echo "******DOCKER DATABASE CREATED******"
   #+END_SRC

   Finally I have to add a user to the database
   #+BEGIN_SRC sh :tangle db_container/Dockerfile
     ADD fix-acl.sh /docker-entrypoint-initdb.d/
     ADD create_user_db.sh /docker-entrypoint-initdb.d/
   #+END_SRC

   Now we can build and run the image
   #+BEGIN_SRC sh :dir db_container
     docker build --tag chado_db .
     docker run -d -e CHADO_DB=chado -e CHADO_USER=tbro -e CHADO_PW=tbro --name "Chado_DB_4_TBro" chado_db
   #+END_SRC

** Apache container
   We start from the default postgres container
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     FROM ubuntu
   #+END_SRC

   First we update our machine and install the required php packages
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     RUN apt-get update
     RUN apt-get --assume-yes install \
         apache2 \
         php5 \
         php-pear \
         php5-pgsql \
         php5-curl \
         php5-dev \
         build-essential
   #+END_SRC

   Next we need to install phing
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     RUN pear channel-discover pear.phing.info
     RUN pear install --alldeps phing/phing
     RUN pear channel-discover pear.propelorm.org
     RUN pear install -a propel/propel_runtime
     RUN pear install Log
     RUN pear install Console_CommandLine
     #RUN pear install Console_Table
     RUN pear install channel://pear.php.net/Console_ProgressBar-0.5.2beta
   #+END_SRC

   Modify php.ini to diable phar.readonly
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     RUN sed -i '/phar.readonly = /s/^.*/phar.readonly = Off/' /etc/php5/cli/php.ini
   #+END_SRC

   We have to enable mod_rewrite
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     RUN a2enmod rewrite
   #+END_SRC

   The Chado installation instruction give the following modules as required for the installation:
   | module name              | description                | via package manager            |
   |--------------------------+----------------------------+--------------------------------|
   | URI::Escape              |                            |                                |
   | Pod::Usage               |                            |                                |
   | Config::General          |                            |                                |
   | DBI                      | gbrowse, chado             | libdbi-perl                    |
   | DBD::Pg                  | gbrowse, chado             | libdbd-pg-perl                 |
   | Digest::MD5              |                            |                                |
   | Module::Build            | chado (installation only)  | libmodule-build-perl           |
   | Class::DBI               | chado                      | libclass-dbi-perl              |
   | Class::DBI::Pg           | chado                      | libclass-dbi-pg-perl           |
   | Class::DBI::Pager        | chado                      | libclass-dbi-pager-perl        |
   | Class::DBI::View         | chado                      |                                |
   | XML::Simple              | chado (installation only?) | libxml-simple-perl             |
   | LWP                      | chado (installation only)  |                                |
   | Template                 | chado                      | libtemplate-perl               |
   | Log::Log4perl            | chado                      | liblog-log4perl-perl           |
   | XML::Parser::PerlSAX     | XORT, Apollo               |                                |
   | XML::DOM                 | XORT, Apollo               | libxml-dom-perl                |
   | File::Path               |                            |                                |
   | Text::Tabs               |                            |                                |
   | File::Spec               |                            |                                |
   | XML::Writer              | SOI                        | libxml-writer-perl             |
   | Graph                    | Chaos                      | libgraph-perl                  |
   | DBIx::DBStag             | chado, ontology loader     | libdbix-dbstag-perl            |
   | GO::Parser               | chado, ontology loader     |                                |
   | XML::LibXSLT             | chaos                      | libxml-libxslt-perl            |
   | Ima::DBI                 | SGN ontology loader        | libima-dbi-perl                |
   | Class::MethodMaker       | SGN ontology loader        | libclass-methodmaker-perl      |
   | URI                      | SGN ontology loader        | liburi-perl                    |
   | LWP::Simple              | SGN ontology loader        |                                |
   | XML::Twig                | SGN ontology loader        | libxml-twig-perl               |
   | Tie::UrlEncoder          | SGN ontology loader        |                                |
   | HTML::TreeBuilder        | SGN ontology loader        |                                |
   | Time::HiRes              | SGN ontology loader        |                                |
   | File::NFSLock            | SGN ontology loader        | libfile-nfslock-perl           |
   | Class::Data::Inheritable | SGN ontology loader        | libclass-data-inheritable-perl |
   | IO::Dir                  | chado install util         |                                |
   | Text::Wrap               | snp2gff?                   |                                |

   Install required perl modules
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     RUN apt-get install --assume-yes \
         libdbi-perl \
         libdbd-pg-perl \
         libmodule-build-perl \
         libclass-dbi-perl \
         libclass-dbi-pg-perl \
         libclass-dbi-pager-perl \
         libxml-simple-perl \
         libtemplate-perl \
         liblog-log4perl-perl \
         libxml-dom-perl \
         libxml-writer-perl \
         libgraph-perl \
         libdbix-dbstag-perl \
         libxml-libxslt-perl \
         libima-dbi-perl \
         libclass-methodmaker-perl \
         liburi-perl \
         libxml-twig-perl \
         libfile-nfslock-perl \
         libclass-data-inheritable-perl \
         xsltproc \
         postgresql-server-dev-all
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install SQL::Translator'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install URI::Escape'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Pod::Usage'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Config::General'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Digest::MD5'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Class::DBI::View'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install LWP'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install XML::Parser::PerlSAX'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install File::Path'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Text::Tabs'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install File::Spec'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install GO::Parser'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install LWP::Simple'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Tie::UrlEncoder'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install HTML::TreeBuilder'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Time::HiRes'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install IO::Dir'
     #RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install Text::Wrap'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install DBD::Pg'
     RUN PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'force install GO::Utils'
   #+END_SRC

   Generate a TBro image from the commit  82c52be7f
   #+BEGIN_SRC sh :dir ../
     git archive --format tar.gz --output docker/82c52be7f_Tbro.tar.gz 82c52be7f
   #+END_SRC

   And copy the TBro archive to the image
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     ADD 82c52be7f_Tbro.tar.gz /home/tbro/
   #+END_SRC

   Generate a build.properties based on the environmental variables
   given to the container. Therefore we need a script:
   #+BEGIN_SRC sh :tangle apache_container/build_installation.sh :shebang "#!/bin/bash"
     echo "
     prefix = /opt
     config_dir = \${prefix}/etc/tbro
     bin_dir = \${prefix}/bin
     www_root = \${prefix}/var/www/tbro
     share_path = \${prefix}/share/tbro
     var_path = \${prefix}/var/tbro
     autocomplete_path = /etc/bash_completion.d
     www_user = www-data
     www_group = www-data
     www_mode = 0777

     chado_db_host = $CHADO_PORT_5432_TCP_ADDR
     chado_db_name = $CHADO_ENV_CHADO_DB
     chado_db_port = $CHADO_PORT_5432_TCP_PORT
     chado_db_username = $CHADO_ENV_CHADO_USER
     chado_db_password = $CHADO_ENV_CHADO_PW

     queue_db_host = $WORKER_PORT_5432_TCP_ADDR
     queue_db_name = $WORKER_ENV_DB_NAME
     queue_db_port = $WORKER_PORT_5432_TCP_PORT
     queue_db_username = $WORKER_ENV_DB_USER
     queue_db_password = $WORKER_ENV_DB_PW

     srcdir = \${project.basedir}/src
     builddir = /tmp/build/tbro" > /home/tbro/build.properties
   #+END_SRC

   And add this script to our image
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     ADD build_installation.sh /home/tbro/
   #+END_SRC

   Additionally, I want to have the script for database-Installation in my image
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     ADD generate_db.sh /home/tbro/
   #+END_SRC

   Additionally, I want to have the chado code in our image
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     ADD chado-1.2.mod.tar.gz /tmp/
     ADD g_o.1_2.chadoxml.tar.gz /tmp/
   #+END_SRC

   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     RUN apt-get install --assume-yes postgresql-client-9.3
     RUN apt-get install --assume-yes libgo-perl
   #+END_SRC

   Finally we start the apache instance
   #+BEGIN_SRC sh :tangle apache_container/Dockerfile
     CMD service apache2 start; while true; do sleep 60; done
   #+END_SRC

   Creation of the image:
   #+BEGIN_SRC sh
     docker build --tag tbro_apache .
     docker run -d --link Chado_DB_4_TBro:CHADO --link Worker_DB_4_TBro:WORKER --name "TBro" -p 8090:80 tbro_apache

     ## build the build.properties
     docker exec -i -t TBro /home/tbro/build_installation.sh

     ## generate the chado database
     docker exec -i -t TBro /home/tbro/generate_db.sh

   #+END_SRC

** Installation of Chado database
   #+BEGIN_SRC sh :tangle apache_container/generate_db.sh :shebang "#!/bin/bash"
     export CHADO_DB_NAME=${CHADO_ENV_CHADO_DB:-chado}
     export CHADO_DB_USERNAME=${CHADO_ENV_CHADO_USER:-tbro}
     export CHADO_DB_PASSWORD=${CHADO_ENV_CHADO_PW:-tbro}
     export CHADO_DB_HOST=${CHADO_PORT_5432_TCP_ADDR:-localhost}
     export CHADO_DB_PORT=${CHADO_PORT_5432_TCP_PORT:-5432}

     mkdir -p /usr/local/gmod
     export GMOD_ROOT=/usr/local/gmod

     cd /tmp/chado-1.2/

     # remove old build.conf if existing
     if [ -e build.conf ]
     then
         rm build.conf
     fi

     # run the Makefile.PL generator
     echo "" | perl Makefile.PL

     # the installation name for stag-storenode does not end by an .pl
     # to circumstand the wrong name I am generating links with the expected names
     ln -s $(which stag-storenode) $(dirname $(which stag-storenode))/stag-storenode.pl
     ln -s $(which go2fmt) $(dirname $(which go2fmt))/go2fmt.pl


     # run the make commands
     make
     make install
     make load_schema
     make prepdb
     make ontologies <<EOF
     1,2
     EOF

     # install the prepared GO 1.2
     stag-storenode.pl \
         -d 'dbi:Pg:dbname='$CHADO_DB_NAME';host='$CHADO_DB_HOST';port='$CHADO_DB_PORT \
         --user "$CHADO_DB_USERNAME" \
         --password "$CHADO_DB_PASSWORD" \
         ../g_o.1_2.chadoxml

     # make the optional targets
     make rm_locks
     make clean
   #+END_SRC

** Worker database
   We start from the default postgres container
   #+BEGIN_SRC sh :tangle worker_db_container/Dockerfile
     FROM postgres:9.3
   #+END_SRC

   #+BEGIN_SRC sh :tangle ./worker_db_container/fix-acl.sh :shebang "#!/bin/bash"
     echo "******MODIFYING PG_HBA.CONF******"
     cat > /var/lib/postgresql/data/pg_hba.conf <<EOS
     # Generated by fix-acl.sh
     # TYPE  DATABASE        USER            ADDRESS                 METHOD
     # "local" is for Unix domain socket connections only
     local   all             all                                     trust
     # IPv4 local connections:
     host    all             all             127.0.0.1/32            trust
     # IPv6 local connections:
     host    all             all             ::1/128                 trust

     # Allow anyone to connect remotely so long as they have a valid username and
     # password.
     host all all 0.0.0.0/0 md5
     EOS
     echo ""
     echo "******MODIFYING PG_HBA.CONF FINISHED******"
   #+END_SRC

   #+BEGIN_SRC sh :tangle ./worker_db_container/create_user_db.sh :shebang "#!/bin/bash"
     # Check if the environment variables WORKER_* exist otherwise take default values
     WORKER_DB=${WORKER_DB:-worker}
     WORKER_PW=${WORKER_PW:-worker}
     WORKER_USER=${WORKER_USER:-worker}
     echo "******CREATING DOCKER DATABASE******"
     gosu postgres postgres --single <<- EOSQL
        CREATE DATABASE $WORKER_DB;
        CREATE ROLE $WORKER_USER ENCRYPTED PASSWORD '$WORKER_PW' NOSUPERUSER CREATEDB NOCREATEROLE INHERIT LOGIN;
        ALTER DATABASE $WORKER_DB OWNER TO $WORKER_USER;
        GRANT ALL PRIVILEGES ON DATABASE $WORKER_DB to $WORKER_USER;
     EOSQL
     echo ""
     echo "******DOCKER DATABASE CREATED******"
   #+END_SRC

   Finally I have to add a user to the database
   #+BEGIN_SRC sh :tangle worker_db_container/Dockerfile
     ADD fix-acl.sh /docker-entrypoint-initdb.d/
     ADD create_user_db.sh /docker-entrypoint-initdb.d/
   #+END_SRC

   Create the worker_db_image
   #+BEGIN_SRC sh
     docker build --tag "tbro_worker_db" .
     docker run -d -e WORKER_DB=worker -e WORKER_USER=worker -e WORKER_PW=worker --name "Worker_DB_4_TBro" tbro_worker_db
   #+END_SRC
